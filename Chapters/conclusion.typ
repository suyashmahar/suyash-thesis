This dissertation presents approaches to improving programmability and utility of emerging memory technologies. We propose Snapshot to enable programmers to use the existing `msync()`-based FAMS interface while exploiting the byte-addressable nature of NVM and CXL-based memory semantic SSD devices. Snapshot is completely userspace-based while being highly performant. Snapshot is between 1.2$times$ and 10.9$times$ faster than other crash-consistency mechanisms.

To avoid the limitations of today's programming interfaces for accessing NVM devices, we propose Puddles. Puddles enable relocatable, pointer-rich data while providing application-independent recovery after a crash. Applications using Puddles can allocate native, pointer-rich data structures and share them between processes or machines without expensive serialization or deserialization. Puddles are as fast as and up to 1.34$times$ faster than PMDK while being competitive with other PM libraries across YCSB workloads.

Finally, with RPCool we enable applications across servers to share pointer-rich data structures by passing pointers instead of expensive serialization or compression. Additionally, RPCool addresses the shortcomings of using CXL-based shared memory's RPCs by enabling isolation and protection of invalid/stray pointers. This allows applications to have similar safety guarantees with CXl-based shared memory RPCs as they would have with traditional networking like TCP. RPCool reduces the round-trip latency by 2.2$times$
and 6.3$times$ compared to state-of-the-art RDMA and CXL-based RPC mechanisms, respectively.